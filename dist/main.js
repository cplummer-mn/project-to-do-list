(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>A});var o=n(537),a=n.n(o),s=n(645),r=n.n(s),c=n(667),i=n.n(c),l=new URL(n(606),n.b),d=r()(a()),p=i()(l);d.push([e.id,`@font-face {\n    font-family: 'MyFont';\n    src: url(${p});\n    font-weight: 600;\n    font-style: normal;\n  }\n  \n  :root {\n    --primary: #00ADB5;\n    --third: #222831;\n    --secondary: #393E46;\n    --text-color: #393E46;\n    --text-color-two: #EEEEEE;\n  }\n  \n  * {\n    box-sizing: border-box; \n    font-family: 'MyFont';\n   }\n  \n   body {\n     margin: 0;\n   }\n  \n   main {\n     display: flex;\n     min-height: calc(100vh - 15vh);\n     color: var(--text-color-two);\n   }\n  \n   .main-content {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    align-items: center;\n    flex: 0 0 80vw;\n    background-color: var(--third);\n   }\n  \n   #add-task-button {\n    height: 2vh;\n   }\n  \n   button {\n    background-color: var(--text-color-two);\n   }\n  \n   #task-menu {\n    display: flex;\n    gap: 5px;\n   }\n  \n   .task-item {\n    display: flex;\n    flex-direction: column;\n    background-color: var(--primary);\n    border-radius: 5px;\n    padding: 0px 8px 0px 8px;\n    width: 30vw;\n   }\n  \n   .task-main-content {\n    display: flex;\n    gap: 10px;\n    align-items: center;\n    justify-content: space-between;\n   }\n  \n   .task-secondary-content {\n    display: flex;\n    gap: 30px;\n    align-items: center;\n    justify-content: space-evenly;\n    padding: 0px 15px 0px 15px;\n    margin-bottom: 5px;\n   }\n  \n   .big-task-item {\n    height: 13%;\n   }\n  \n   #x-icon {\n    width: 25px;\n    cursor: pointer;\n   }\n  \n   #hamburger-icon  {\n    width: 15px;\n    cursor: pointer;\n    align-self: center;\n    padding-bottom: 5px;\n   }\n   \n   sidebar {\n     flex: 0 0 20vw;\n     background-color: var(--secondary);\n     order: -1;\n     text-align: center;\n     box-shadow: 0 0 15px 2px black;\n     clip-path: inset(0px -15px 0px 0px);\n     z-index: 1;\n     font-size: 1.2em;\n   }\n   \n   .selected {\n    background-color: var(--primary);\n    border-radius: 10px;\n   }\n  \n   .projects {\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 10px;\n   }\n  \n   .projects img {\n    height: 25px;\n    width: 25px;\n   }\n  \n   .projects-title {\n    padding-top: 10px;\n   }\n  \n   header, footer, sidebar, .main-content {\n     padding: 1em;\n   }\n  \n   header {\n     height: 10vh;\n     display: flex;\n     align-items: center;\n     padding-left: 5em;\n     border-bottom: solid 3px black;\n     font-size: 1.5em;\n     gap: 15px;\n   }\n  \n   footer {\n    height: 5vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    border-top: solid 3px black;\n   }\n  \n   .footer-content {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 25px;\n   }\n  \n   header, footer {\n    background-color: var(--primary);\n    color: var(--text-color);\n   }`,"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,qBAAqB;IACrB,4CAAsD;IACtD,gBAAgB;IAChB,kBAAkB;EACpB;;EAEA;IACE,kBAAkB;IAClB,gBAAgB;IAChB,oBAAoB;IACpB,qBAAqB;IACrB,yBAAyB;EAC3B;;EAEA;IACE,sBAAsB;IACtB,qBAAqB;GACtB;;GAEA;KACE,SAAS;GACX;;GAEA;KACE,aAAa;KACb,8BAA8B;KAC9B,4BAA4B;GAC9B;;GAEA;IACC,aAAa;IACb,sBAAsB;IACtB,SAAS;IACT,mBAAmB;IACnB,cAAc;IACd,8BAA8B;GAC/B;;GAEA;IACC,WAAW;GACZ;;GAEA;IACC,uCAAuC;GACxC;;GAEA;IACC,aAAa;IACb,QAAQ;GACT;;GAEA;IACC,aAAa;IACb,sBAAsB;IACtB,gCAAgC;IAChC,kBAAkB;IAClB,wBAAwB;IACxB,WAAW;GACZ;;GAEA;IACC,aAAa;IACb,SAAS;IACT,mBAAmB;IACnB,8BAA8B;GAC/B;;GAEA;IACC,aAAa;IACb,SAAS;IACT,mBAAmB;IACnB,6BAA6B;IAC7B,0BAA0B;IAC1B,kBAAkB;GACnB;;GAEA;IACC,WAAW;GACZ;;GAEA;IACC,WAAW;IACX,eAAe;GAChB;;GAEA;IACC,WAAW;IACX,eAAe;IACf,kBAAkB;IAClB,mBAAmB;GACpB;;GAEA;KACE,cAAc;KACd,kCAAkC;KAClC,SAAS;KACT,kBAAkB;KAClB,8BAA8B;KAC9B,mCAAmC;KACnC,UAAU;KACV,gBAAgB;GAClB;;GAEA;IACC,gCAAgC;IAChC,mBAAmB;GACpB;;GAEA;IACC,eAAe;IACf,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,SAAS;GACV;;GAEA;IACC,YAAY;IACZ,WAAW;GACZ;;GAEA;IACC,iBAAiB;GAClB;;GAEA;KACE,YAAY;GACd;;GAEA;KACE,YAAY;KACZ,aAAa;KACb,mBAAmB;KACnB,iBAAiB;KACjB,8BAA8B;KAC9B,gBAAgB;KAChB,SAAS;GACX;;GAEA;IACC,WAAW;IACX,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,2BAA2B;GAC5B;;GAEA;IACC,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,SAAS;GACV;;GAEA;IACC,gCAAgC;IAChC,wBAAwB;GACzB",sourcesContent:["@font-face {\n    font-family: 'MyFont';\n    src: url('./assets/fonts/Dosis-VariableFont_wght.ttf');\n    font-weight: 600;\n    font-style: normal;\n  }\n  \n  :root {\n    --primary: #00ADB5;\n    --third: #222831;\n    --secondary: #393E46;\n    --text-color: #393E46;\n    --text-color-two: #EEEEEE;\n  }\n  \n  * {\n    box-sizing: border-box; \n    font-family: 'MyFont';\n   }\n  \n   body {\n     margin: 0;\n   }\n  \n   main {\n     display: flex;\n     min-height: calc(100vh - 15vh);\n     color: var(--text-color-two);\n   }\n  \n   .main-content {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    align-items: center;\n    flex: 0 0 80vw;\n    background-color: var(--third);\n   }\n  \n   #add-task-button {\n    height: 2vh;\n   }\n  \n   button {\n    background-color: var(--text-color-two);\n   }\n  \n   #task-menu {\n    display: flex;\n    gap: 5px;\n   }\n  \n   .task-item {\n    display: flex;\n    flex-direction: column;\n    background-color: var(--primary);\n    border-radius: 5px;\n    padding: 0px 8px 0px 8px;\n    width: 30vw;\n   }\n  \n   .task-main-content {\n    display: flex;\n    gap: 10px;\n    align-items: center;\n    justify-content: space-between;\n   }\n  \n   .task-secondary-content {\n    display: flex;\n    gap: 30px;\n    align-items: center;\n    justify-content: space-evenly;\n    padding: 0px 15px 0px 15px;\n    margin-bottom: 5px;\n   }\n  \n   .big-task-item {\n    height: 13%;\n   }\n  \n   #x-icon {\n    width: 25px;\n    cursor: pointer;\n   }\n  \n   #hamburger-icon  {\n    width: 15px;\n    cursor: pointer;\n    align-self: center;\n    padding-bottom: 5px;\n   }\n   \n   sidebar {\n     flex: 0 0 20vw;\n     background-color: var(--secondary);\n     order: -1;\n     text-align: center;\n     box-shadow: 0 0 15px 2px black;\n     clip-path: inset(0px -15px 0px 0px);\n     z-index: 1;\n     font-size: 1.2em;\n   }\n   \n   .selected {\n    background-color: var(--primary);\n    border-radius: 10px;\n   }\n  \n   .projects {\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 10px;\n   }\n  \n   .projects img {\n    height: 25px;\n    width: 25px;\n   }\n  \n   .projects-title {\n    padding-top: 10px;\n   }\n  \n   header, footer, sidebar, .main-content {\n     padding: 1em;\n   }\n  \n   header {\n     height: 10vh;\n     display: flex;\n     align-items: center;\n     padding-left: 5em;\n     border-bottom: solid 3px black;\n     font-size: 1.5em;\n     gap: 15px;\n   }\n  \n   footer {\n    height: 5vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    border-top: solid 3px black;\n   }\n  \n   .footer-content {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 25px;\n   }\n  \n   header, footer {\n    background-color: var(--primary);\n    color: var(--text-color);\n   }"],sourceRoot:""}]);const A=d},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,a,s){"string"==typeof e&&(e=[[null,e,void 0]]);var r={};if(o)for(var c=0;c<this.length;c++){var i=this[c][0];null!=i&&(r[i]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);o&&r[d[0]]||(void 0!==s&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=s),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),a&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=a):d[4]="".concat(a)),t.push(d))}},t}},667:e=>{e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),s="/*# ".concat(a," */");return[t].concat([s]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var s={},r=[],c=0;c<e.length;c++){var i=e[c],l=o.base?i[0]+o.base:i[0],d=s[l]||0,p="".concat(l," ").concat(d);s[l]=d+1;var A=n(p),u={css:i[1],media:i[2],sourceMap:i[3],supports:i[4],layer:i[5]};if(-1!==A)t[A].references++,t[A].updater(u);else{var m=a(u,o);o.byIndex=c,t.splice(c,0,{identifier:p,updater:m,references:1})}r.push(p)}return r}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var s=o(e=e||[],a=a||{});return function(e){e=e||[];for(var r=0;r<s.length;r++){var c=n(s[r]);t[c].references--}for(var i=o(e,a),l=0;l<s.length;l++){var d=n(s[l]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}s=i}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,a&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var s=n.sourceMap;s&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},606:(e,t,n)=>{e.exports=n.p+"1af19a28a29fcb2321da.ttf"}},t={};function n(o){var a=t[o];if(void 0!==a)return a.exports;var s=t[o]={id:o,exports:{}};return e[o](s,s.exports,n),s.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var o=t.getElementsByTagName("script");if(o.length)for(var a=o.length-1;a>-1&&!e;)e=o[a--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,n.nc=void 0,(()=>{var e=n(379),t=n.n(e),o=n(795),a=n.n(o),s=n(569),r=n.n(s),c=n(565),i=n.n(c),l=n(216),d=n.n(l),p=n(589),A=n.n(p),u=n(426),m={};m.styleTagTransform=A(),m.setAttributes=i(),m.insert=r().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=d(),t()(u.Z,m),u.Z&&u.Z.locals&&u.Z.locals;const f=n.p+"8e450a0cd5ea81b97e55.png",g=n.p+"a07e7f4c9c1782bf3935.png",C=document.getElementById("main-content");var h=!1;class B{constructor(e,t){this.name=e,this.dueDate=t,this.description="No description",this.priority=1,this.isBig=!1}displayTask(){const e=document.createElement("div");e.classList.add("task-item");const t=document.createElement("div");t.classList.add("task-main-content");const n=document.createElement("input");n.type="checkbox";const o=document.createElement("h3");o.id="task-name",o.textContent=this.name;const a=document.createElement("h3");a.textContent=this.dueDate;const s=new Image;s.src=f,s.id="x-icon";const r=document.createElement("div");r.classList.add("task-secondary-content");const c=document.createElement("p");c.textContent=this.description;const i=document.createElement("p");i.textContent=this.priority;const l=new Image;function d(e){var t=document.createRange();t.selectNodeContents(e);var n=window.getSelection();n.removeAllRanges(),n.addRange(t)}l.src=g,l.id="hamburger-icon",t.appendChild(n),t.appendChild(o),t.appendChild(a),t.appendChild(s),r.appendChild(c),r.appendChild(i),e.appendChild(t),e.appendChild(l),C.appendChild(e),this.isDisplayed=!0,s.addEventListener("click",(t=>{console.log("remove task was clicked"),C.removeChild(e);const n=project.tasks.indexOf(task);project.tasks.splice(n,1),console.log(project)})),l.addEventListener("click",(t=>{task.isBig?(task.isBig=!1,e.classList.remove("big-task-item"),e.removeChild(r)):(task.isBig=!0,e.classList.add("big-task-item"),e.insertBefore(r,l))})),o.addEventListener("click",(e=>{h||(o.contentEditable=!0,o.focus(),d(o),h=!0),o.addEventListener("keypress",(e=>{"Enter"===e.key&&(task.name=o.textContent,o.contentEditable=!1,h=!1)}))})),c.addEventListener("click",(e=>{h||(c.contentEditable=!0,c.focus(),d(c),h=!0),c.addEventListener("keypress",(e=>{"Enter"===e.key&&(task.description=c.textContent,c.contentEditable=!1,h=!1)}))}))}}const x=document.getElementById("main-content");class y{constructor(e,t){this.name=e,this.tasks=[],this.isSelected=!1,this.id=t}addTask(e){this.tasks.push(e)}select(){console.log("selecting "+this.name),this.isSelected=!0,console.log(this),E.selectProject(this.id),this.display()}deselect(){this.isSelected=!1}isSelected(){return this.isSelected}display(){console.log(this.name+" is being displayed");const e=document.querySelectorAll(".task-item");console.log(e);for(const t of e)console.log(t),x.removeChild(t);for(const e of this.tasks)e.displayTask()}}class v{constructor(){this.projects=[],this.projects.push(new y("Default Project","default-project")),this.projects.push(new y("Today Project","today-project-title")),this.projects.push(new y("This Week Project","this-week-project-title"))}addProject(e){this.projects.push(e)}getProjects(){return this.projects}}class b{static createDefaults(){console.log("creating defaults"),localStorage.setItem("data",JSON.stringify(new v))}static getData(){const e=Object.assign(new v,JSON.parse(localStorage.getItem("data")));return e.projects=e.projects.map((e=>Object.assign(new y,e))),e.projects.forEach((e=>{e.tasks=e.tasks.map((e=>Object.assign(new B,e)))})),e}static updateData(e){localStorage.setItem("data",JSON.stringify(e))}}const k=document.getElementById("main-content");class E{static loadPage(){E.loadData(),E.loadListeners()}static loadListeners(){document.getElementById("add-task-button").addEventListener("click",E.openTaskMenu),document.getElementById("default-project").addEventListener("click",E.displayDefaultProject),document.getElementById("today-project-title").addEventListener("click",E.displayTodayProject),document.getElementById("this-week-project-title").addEventListener("click",E.displayThisWeekProject)}static loadData(){if(null===localStorage.getItem("data")){b.createDefaults();const e=b.getData();for(const t of e.projects)"Default Project"==t.name&&t.select();b.updateData(e)}else console.log(b.getData()),E.loadSelected()}static openTaskMenu(){console.log("Add task button clicked");const e=document.createElement("form");e.id="task-menu";const t=document.createElement("input"),n=document.createElement("input");n.type="date";const o=document.createElement("button");o.type="button",o.textContent="Add Task",e.appendChild(t),e.appendChild(n),e.appendChild(o),k.appendChild(e),o.addEventListener("click",(o=>{const a=new B(t.value,n.value);console.log(a);const s=b.getData();for(const e of s.projects)e.isSelected&&(console.log("adding "+a.name+" to "+e.name),e.addTask(a),e.display());b.updateData(s),k.removeChild(e)}))}static selectProject(e){E.deselectProjects(),document.getElementById(e).classList.add("selected")}static deselectProjects(){const e=document.getElementsByClassName("projects");for(const t of e)t.classList.remove("selected")}static loadSelected(){console.log("Loading selected project");const e=b.getData();console.log(e);for(const t of e.getProjects())t.isSelected?(console.log("displaying "+t.name),t.select(),t.display()):console.log("no project selected, fix this")}static displayDefaultProject(){const e=b.getData();for(const t of e.projects)t.isSelected&&t.deselect();for(const t of e.projects)"Default Project"==t.name&&t.select();b.updateData(e),console.log(b.getData())}static displayTodayProject(){const e=b.getData();for(const t of e.projects)t.isSelected&&t.deselect();for(const t of e.projects)"Today Project"==t.name&&t.select();b.updateData(e),console.log(b.getData())}static displayThisWeekProject(){const e=b.getData();for(const t of e.projects)t.isSelected&&t.deselect();for(const t of e.projects)"This Week Project"==t.name&&t.select();b.updateData(e),console.log(b.getData())}}E.loadPage()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
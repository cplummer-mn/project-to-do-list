(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>A});var o=n(537),a=n.n(o),r=n(645),s=n.n(r),i=n(667),c=n.n(i),d=new URL(n(606),n.b),l=s()(a()),p=c()(d);l.push([e.id,`@font-face {\n    font-family: 'MyFont';\n    src: url(${p});\n    font-weight: 600;\n    font-style: normal;\n  }\n  \n  :root {\n    --primary: #00ADB5;\n    --third: #222831;\n    --secondary: #393E46;\n    --text-color: #222427;\n    --text-color-two: #EEEEEE;\n  }\n  \n  * {\n    box-sizing: border-box; \n    font-family: 'MyFont';\n   }\n  \n   body {\n     margin: 0;\n   }\n  \n   main {\n     display: flex;\n     min-height: calc(100vh - 12.5vh);\n     color: var(--text-color-two);\n   }\n  \n   .main-content {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    align-items: center;\n    flex: 0 0 80vw;\n    background-color: var(--third);\n   }\n  \n   button {\n    background-color: var(--primary);\n    border-radius: 10px;\n    border: 2px solid var(--text-color-two);\n    padding: 6px;\n   }\n  \n   #task-menu {\n    display: flex;\n    gap: 5px;\n   }\n  \n   .task-item {\n    display: flex;\n    flex-direction: column;\n    background-color: var(--primary);\n    border-radius: 5px;\n    border: 1px solid #000000;\n    padding: 0px 8px 0px 8px;\n    width: 30vw;\n    box-shadow: 15px 10px 5px #14161a;\n    text-shadow: 3px 2px 5px #14161a;\n   }\n\n   #change-due-date-menu {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 2px;\n   }\n\n   .dropdown {\n    display: inline-block;\n   }\n\n   .dropdown-content {\n    display: none;\n    position: absolute;\n    z-index: 1;\n    background-color: var(--secondary);\n   }\n\n   .dropdown-content a {\n    display: block;\n    color: #eeeeee;\n    cursor: pointer;\n    padding: 5px 5px;\n   }\n\n   .dropbtn {\n    border: none;\n    color: #eeeeee;\n   }\n  \n   .task-main-content {\n    display: flex;\n    gap: 10px;\n    align-items: center;\n    justify-content: space-between;\n   }\n  \n   .task-secondary-content {\n    display: flex;\n    gap: 30px;\n    align-items: center;\n    justify-content: space-evenly;\n    padding: 0px 15px 0px 15px;\n    margin-bottom: 5px;\n   }\n  \n   #x-icon {\n    width: 15px;\n    cursor: pointer;\n   }\n  \n   #hamburger-icon  {\n    width: 15px;\n    cursor: pointer;\n    align-self: center;\n    padding-bottom: 5px;\n   }\n   \n   sidebar {\n     flex: 0 0 20vw;\n     background-color: var(--secondary);\n     order: -1;\n     text-align: center;\n     box-shadow: 0 0 15px 2px black;\n     clip-path: inset(0px -15px 0px 0px);\n     z-index: 1;\n     font-size: 1.2em;\n   }\n   \n   .selected {\n    background-color: var(--primary);\n    border-radius: 10px;\n   }\n  \n   .projects {\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 10px;\n    text-shadow: 7px 4px 5px #14161a;\n   }\n\n   #add-project-button {\n    margin-top: 15px;\n   }\n\n   .projects:hover {\n    font-size: 110%;\n   }\n  \n   .projects img {\n    height: 25px;\n    width: 25px;\n   }\n  \n   .projects-title {\n    padding-top: 10px;\n   }\n  \n   header, footer, sidebar, .main-content {\n     padding: 1em;\n   }\n  \n   header {\n     height: 7.5vh;\n     display: flex;\n     align-items: center;\n     padding-left: 5em;\n     border-bottom: solid 3px black;\n     font-size: 1.5em;\n     gap: 15px;\n   }\n  \n   footer {\n    height: 5vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    border-top: solid 3px black;\n   }\n  \n   .footer-content {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 25px;\n   }\n  \n   header, footer {\n    background-color: var(--primary);\n    color: var(--text-color);\n   }\n\n   img {\n    -webkit-filter: drop-shadow(1px 1px 2px #14161a);\n    filter: drop-shadow(1px 1px 2px #14161a);\n   }\n\n   #header-logo, #koala-logo {\n    -webkit-filter: drop-shadow(1px 1px 2px #eeeeee);\n    filter: drop-shadow(1px 1px 2px #eeeeee);\n   }`,"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,qBAAqB;IACrB,4CAAsD;IACtD,gBAAgB;IAChB,kBAAkB;EACpB;;EAEA;IACE,kBAAkB;IAClB,gBAAgB;IAChB,oBAAoB;IACpB,qBAAqB;IACrB,yBAAyB;EAC3B;;EAEA;IACE,sBAAsB;IACtB,qBAAqB;GACtB;;GAEA;KACE,SAAS;GACX;;GAEA;KACE,aAAa;KACb,gCAAgC;KAChC,4BAA4B;GAC9B;;GAEA;IACC,aAAa;IACb,sBAAsB;IACtB,SAAS;IACT,mBAAmB;IACnB,cAAc;IACd,8BAA8B;GAC/B;;GAEA;IACC,gCAAgC;IAChC,mBAAmB;IACnB,uCAAuC;IACvC,YAAY;GACb;;GAEA;IACC,aAAa;IACb,QAAQ;GACT;;GAEA;IACC,aAAa;IACb,sBAAsB;IACtB,gCAAgC;IAChC,kBAAkB;IAClB,yBAAyB;IACzB,wBAAwB;IACxB,WAAW;IACX,iCAAiC;IACjC,gCAAgC;GACjC;;GAEA;IACC,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;IACnB,QAAQ;GACT;;GAEA;IACC,qBAAqB;GACtB;;GAEA;IACC,aAAa;IACb,kBAAkB;IAClB,UAAU;IACV,kCAAkC;GACnC;;GAEA;IACC,cAAc;IACd,cAAc;IACd,eAAe;IACf,gBAAgB;GACjB;;GAEA;IACC,YAAY;IACZ,cAAc;GACf;;GAEA;IACC,aAAa;IACb,SAAS;IACT,mBAAmB;IACnB,8BAA8B;GAC/B;;GAEA;IACC,aAAa;IACb,SAAS;IACT,mBAAmB;IACnB,6BAA6B;IAC7B,0BAA0B;IAC1B,kBAAkB;GACnB;;GAEA;IACC,WAAW;IACX,eAAe;GAChB;;GAEA;IACC,WAAW;IACX,eAAe;IACf,kBAAkB;IAClB,mBAAmB;GACpB;;GAEA;KACE,cAAc;KACd,kCAAkC;KAClC,SAAS;KACT,kBAAkB;KAClB,8BAA8B;KAC9B,mCAAmC;KACnC,UAAU;KACV,gBAAgB;GAClB;;GAEA;IACC,gCAAgC;IAChC,mBAAmB;GACpB;;GAEA;IACC,eAAe;IACf,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,SAAS;IACT,gCAAgC;GACjC;;GAEA;IACC,gBAAgB;GACjB;;GAEA;IACC,eAAe;GAChB;;GAEA;IACC,YAAY;IACZ,WAAW;GACZ;;GAEA;IACC,iBAAiB;GAClB;;GAEA;KACE,YAAY;GACd;;GAEA;KACE,aAAa;KACb,aAAa;KACb,mBAAmB;KACnB,iBAAiB;KACjB,8BAA8B;KAC9B,gBAAgB;KAChB,SAAS;GACX;;GAEA;IACC,WAAW;IACX,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,2BAA2B;GAC5B;;GAEA;IACC,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,SAAS;GACV;;GAEA;IACC,gCAAgC;IAChC,wBAAwB;GACzB;;GAEA;IACC,gDAAgD;IAChD,wCAAwC;GACzC;;GAEA;IACC,gDAAgD;IAChD,wCAAwC;GACzC",sourcesContent:["@font-face {\n    font-family: 'MyFont';\n    src: url('./assets/fonts/Dosis-VariableFont_wght.ttf');\n    font-weight: 600;\n    font-style: normal;\n  }\n  \n  :root {\n    --primary: #00ADB5;\n    --third: #222831;\n    --secondary: #393E46;\n    --text-color: #222427;\n    --text-color-two: #EEEEEE;\n  }\n  \n  * {\n    box-sizing: border-box; \n    font-family: 'MyFont';\n   }\n  \n   body {\n     margin: 0;\n   }\n  \n   main {\n     display: flex;\n     min-height: calc(100vh - 12.5vh);\n     color: var(--text-color-two);\n   }\n  \n   .main-content {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    align-items: center;\n    flex: 0 0 80vw;\n    background-color: var(--third);\n   }\n  \n   button {\n    background-color: var(--primary);\n    border-radius: 10px;\n    border: 2px solid var(--text-color-two);\n    padding: 6px;\n   }\n  \n   #task-menu {\n    display: flex;\n    gap: 5px;\n   }\n  \n   .task-item {\n    display: flex;\n    flex-direction: column;\n    background-color: var(--primary);\n    border-radius: 5px;\n    border: 1px solid #000000;\n    padding: 0px 8px 0px 8px;\n    width: 30vw;\n    box-shadow: 15px 10px 5px #14161a;\n    text-shadow: 3px 2px 5px #14161a;\n   }\n\n   #change-due-date-menu {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 2px;\n   }\n\n   .dropdown {\n    display: inline-block;\n   }\n\n   .dropdown-content {\n    display: none;\n    position: absolute;\n    z-index: 1;\n    background-color: var(--secondary);\n   }\n\n   .dropdown-content a {\n    display: block;\n    color: #eeeeee;\n    cursor: pointer;\n    padding: 5px 5px;\n   }\n\n   .dropbtn {\n    border: none;\n    color: #eeeeee;\n   }\n  \n   .task-main-content {\n    display: flex;\n    gap: 10px;\n    align-items: center;\n    justify-content: space-between;\n   }\n  \n   .task-secondary-content {\n    display: flex;\n    gap: 30px;\n    align-items: center;\n    justify-content: space-evenly;\n    padding: 0px 15px 0px 15px;\n    margin-bottom: 5px;\n   }\n  \n   #x-icon {\n    width: 15px;\n    cursor: pointer;\n   }\n  \n   #hamburger-icon  {\n    width: 15px;\n    cursor: pointer;\n    align-self: center;\n    padding-bottom: 5px;\n   }\n   \n   sidebar {\n     flex: 0 0 20vw;\n     background-color: var(--secondary);\n     order: -1;\n     text-align: center;\n     box-shadow: 0 0 15px 2px black;\n     clip-path: inset(0px -15px 0px 0px);\n     z-index: 1;\n     font-size: 1.2em;\n   }\n   \n   .selected {\n    background-color: var(--primary);\n    border-radius: 10px;\n   }\n  \n   .projects {\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 10px;\n    text-shadow: 7px 4px 5px #14161a;\n   }\n\n   #add-project-button {\n    margin-top: 15px;\n   }\n\n   .projects:hover {\n    font-size: 110%;\n   }\n  \n   .projects img {\n    height: 25px;\n    width: 25px;\n   }\n  \n   .projects-title {\n    padding-top: 10px;\n   }\n  \n   header, footer, sidebar, .main-content {\n     padding: 1em;\n   }\n  \n   header {\n     height: 7.5vh;\n     display: flex;\n     align-items: center;\n     padding-left: 5em;\n     border-bottom: solid 3px black;\n     font-size: 1.5em;\n     gap: 15px;\n   }\n  \n   footer {\n    height: 5vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    border-top: solid 3px black;\n   }\n  \n   .footer-content {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 25px;\n   }\n  \n   header, footer {\n    background-color: var(--primary);\n    color: var(--text-color);\n   }\n\n   img {\n    -webkit-filter: drop-shadow(1px 1px 2px #14161a);\n    filter: drop-shadow(1px 1px 2px #14161a);\n   }\n\n   #header-logo, #koala-logo {\n    -webkit-filter: drop-shadow(1px 1px 2px #eeeeee);\n    filter: drop-shadow(1px 1px 2px #eeeeee);\n   }"],sourceRoot:""}]);const A=l},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,a,r){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(o)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(s[c]=!0)}for(var d=0;d<e.length;d++){var l=[].concat(e[d]);o&&s[l[0]]||(void 0!==r&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=r),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),a&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=a):l[4]="".concat(a)),t.push(l))}},t}},667:e=>{e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),r="/*# ".concat(a," */");return[t].concat([r]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var r={},s=[],i=0;i<e.length;i++){var c=e[i],d=o.base?c[0]+o.base:c[0],l=r[d]||0,p="".concat(d," ").concat(l);r[d]=l+1;var A=n(p),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==A)t[A].references++,t[A].updater(u);else{var m=a(u,o);o.byIndex=i,t.splice(i,0,{identifier:p,updater:m,references:1})}s.push(p)}return s}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var r=o(e=e||[],a=a||{});return function(e){e=e||[];for(var s=0;s<r.length;s++){var i=n(r[s]);t[i].references--}for(var c=o(e,a),d=0;d<r.length;d++){var l=n(r[d]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}r=c}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,a&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var r=n.sourceMap;r&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},606:(e,t,n)=>{e.exports=n.p+"1af19a28a29fcb2321da.ttf"}},t={};function n(o){var a=t[o];if(void 0!==a)return a.exports;var r=t[o]={id:o,exports:{}};return e[o](r,r.exports,n),r.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var o=t.getElementsByTagName("script");if(o.length)for(var a=o.length-1;a>-1&&!e;)e=o[a--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,n.nc=void 0,(()=>{var e=n(379),t=n.n(e),o=n(795),a=n.n(o),r=n(569),s=n.n(r),i=n(565),c=n.n(i),d=n(216),l=n.n(d),p=n(589),A=n.n(p),u=n(426),m={};m.styleTagTransform=A(),m.setAttributes=c(),m.insert=s().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=l(),t()(u.Z,m),u.Z&&u.Z.locals&&u.Z.locals;const g=n.p+"20d5b4ea52aea7eb6d54.png",f=n.p+"99ad0cc97adaa52ef549.png",C=document.getElementById("main-content");var h=!1;class x{constructor(e,t){this.name=e,this.dueDate=t,this.description="No description",this.priority="Low",this.isBig=!1}displayTask(){const e=document.createElement("div");e.classList.add("task-item");const t=document.createElement("div");t.classList.add("task-main-content");const n=document.createElement("input");n.type="checkbox";const o=document.createElement("h3");o.id="task-name",o.textContent=this.name;const a=document.createElement("h3");a.textContent=this.dueDate;const r=new Image;r.src=g,r.id="x-icon";const s=document.createElement("div");s.classList.add("task-secondary-content");const i=document.createElement("p");i.textContent=this.description;const c=document.createElement("div");c.classList.add("dropdown");const d=document.createElement("button");d.textContent=this.priority,d.classList.add("dropbtn");const l=new Image;l.src=f,l.id="hamburger-icon",c.appendChild(d),t.appendChild(n),t.appendChild(o),t.appendChild(a),t.appendChild(r),s.appendChild(i),s.appendChild(c),e.appendChild(t),e.appendChild(l),C.appendChild(e),this.isDisplayed=!0,r.addEventListener("click",(t=>{console.log("remove task was clicked"),C.removeChild(e),v.removeTask(this)})),l.addEventListener("click",(t=>{this.isBig?(this.isBig=!1,e.removeChild(s)):(this.isBig=!0,e.insertBefore(s,l))})),o.addEventListener("click",(e=>{h||(o.contentEditable=!0,o.focus(),selectElementContents(o),h=!0),o.addEventListener("keypress",(e=>{"Enter"===e.key&&(v.changeTaskName(this,o.textContent),o.contentEditable=!1,h=!1)}))})),a.addEventListener("click",(e=>{const n=document.createElement("div");n.id="change-due-date-menu";const o=document.createElement("input");o.type="date",o.value=this.dueDate;const s=document.createElement("button");s.id="change-due-date-button",s.textContent="Submit",n.appendChild(o),n.appendChild(s),h||(a.hidden=!0,t.insertBefore(n,r),h=!0),s.addEventListener("click",(e=>{v.changeTaskDueDate(this,o.value),a.value=o.value,t.removeChild(n),a.hidden=!1,h=!1}))})),i.addEventListener("click",(e=>{h||(i.contentEditable=!0,i.focus(),selectElementContents(i),h=!0),i.addEventListener("keypress",(e=>{"Enter"===e.key&&(v.changeTaskDescription(this,i.textContent),i.contentEditable=!1,h=!1)}))})),d.addEventListener("click",(e=>{const t=document.createElement("div");if(t.classList.add("dropdown-content"),t.innerHTML='<a id="priority-high">High</a><a id="priority-medium" >Medium</a><a id="priority-low" >Low</a>',!h){c.appendChild(t),t.style.display="block";const e=document.getElementById("priority-high"),n=document.getElementById("priority-medium"),o=document.getElementById("priority-low");e.addEventListener("click",(()=>{t.style.display="none",c.removeChild(t),v.changeTaskPriority(this,"High")})),n.addEventListener("click",(()=>{t.style.display="none",c.removeChild(t),v.changeTaskPriority(this,"Medium")})),o.addEventListener("click",(()=>{t.style.display="none",c.removeChild(t),v.changeTaskPriority(this,"Low")}))}}))}}const y=document.getElementById("main-content");class b{constructor(e,t){this.name=e,this.tasks=[],this.isSelected=!1,this.id=t}addTask(e){this.tasks.push(e)}select(){console.log("selecting "+this.name),this.isSelected=!0,console.log(this),Z.selectProject(this.id),this.display()}deselect(){this.isSelected=!1}isSelected(){return this.isSelected}display(){console.log(this.name+" is being displayed");const e=document.getElementById("add-task-button");"Today Project"==this.name||"This Week Project"==this.name?e.hidden=!0:e.hidden=!1;const t=document.querySelectorAll(".task-item");console.log(t);for(const e of t)console.log(e),y.removeChild(e);const n=v.getData();for(const e of n.projects)if(e.name==this.name){console.log(e.name+" is being displayed"),console.log(e);for(const t of e.tasks)t.displayTask()}}}class B{constructor(){this.projects=[],this.projects.push(new b("Default Project","default-project")),this.projects.push(new b("Today Project","today-project-title")),this.projects.push(new b("This Week Project","this-week-project-title"))}addProject(e){this.projects.push(e)}getProjects(){return this.projects}}class v{static createDefaults(){console.log("creating defaults"),localStorage.setItem("data",JSON.stringify(new B))}static getData(){const e=Object.assign(new B,JSON.parse(localStorage.getItem("data")));return e.projects=e.projects.map((e=>Object.assign(new b,e))),e.projects.forEach((e=>{e.tasks=e.tasks.map((e=>Object.assign(new x,e)))})),e}static updateData(e){localStorage.setItem("data",JSON.stringify(e))}static addProject(e){const t=v.getData();t.projects.push(e),v.updateData(t)}static selectProject(e){const t=v.getData();for(const e of t.projects)e.deselect();for(const n of t.projects)n.name==e.name&&n.select();v.updateData(t)}static removeTask(e){const t=v.getData();for(const n of t.projects)for(const t of n.tasks)t.name==e.name&&n.tasks.splice(n.tasks.indexOf(t),1);v.updateData(t),Z.loadSelected()}static changeTaskName(e,t){const n=v.getData();for(const o of n.projects)for(const n of o.tasks)n.name==e.name&&(n.name=t);v.updateData(n),Z.loadSelected()}static changeTaskDescription(e,t){const n=v.getData();for(const o of n.projects)for(const n of o.tasks)n.name==e.name&&(n.description=t);v.updateData(n)}static changeTaskDueDate(e,t){const n=v.getData();for(const o of n.projects)for(const n of o.tasks)n.name==e.name&&(n.dueDate=t);v.updateData(n)}static changeTaskPriority(e,t){const n=v.getData();for(const o of n.projects)for(const n of o.tasks)n.name==e.name&&(n.priority=t);v.updateData(n),Z.loadSelected()}}const k=n.p+"de9de1c6fdab99f3b2a7.png";function E(e){return E="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},E(e)}function j(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function I(e){j(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===E(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function w(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}function D(e){j(1,arguments);var t=I(e);return t.setHours(0,0,0,0),t}function T(e,t){var n=e.getFullYear()-t.getFullYear()||e.getMonth()-t.getMonth()||e.getDate()-t.getDate()||e.getHours()-t.getHours()||e.getMinutes()-t.getMinutes()||e.getSeconds()-t.getSeconds()||e.getMilliseconds()-t.getMilliseconds();return n<0?-1:n>0?1:n}function S(e,t){j(2,arguments);var n=I(e),o=I(t),a=T(n,o),r=Math.abs(function(e,t){j(2,arguments);var n=D(e),o=D(t),a=n.getTime()-w(n),r=o.getTime()-w(o);return Math.round((a-r)/864e5)}(n,o));n.setDate(n.getDate()-a*r);var s=a*(r-Number(T(n,o)===-a));return 0===s?0:s}Math.pow(10,8);var G=36e5;function N(e,t){var n;j(1,arguments);var o=function(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}(null!==(n=null==t?void 0:t.additionalDigits)&&void 0!==n?n:2);if(2!==o&&1!==o&&0!==o)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof e&&"[object String]"!==Object.prototype.toString.call(e))return new Date(NaN);var a,r=function(e){var t,n={},o=e.split(P.dateTimeDelimiter);if(o.length>2)return n;if(/:/.test(o[0])?t=o[0]:(n.date=o[0],t=o[1],P.timeZoneDelimiter.test(n.date)&&(n.date=e.split(P.timeZoneDelimiter)[0],t=e.substr(n.date.length,e.length))),t){var a=P.timezone.exec(t);a?(n.time=t.replace(a[1],""),n.timezone=a[1]):n.time=t}return n}(e);if(r.date){var s=function(e,t){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),o=e.match(n);if(!o)return{year:NaN,restDateString:""};var a=o[1]?parseInt(o[1]):null,r=o[2]?parseInt(o[2]):null;return{year:null===r?a:100*r,restDateString:e.slice((o[1]||o[2]).length)}}(r.date,o);a=function(e,t){if(null===t)return new Date(NaN);var n=e.match(L);if(!n)return new Date(NaN);var o=!!n[4],a=z(n[1]),r=z(n[2])-1,s=z(n[3]),i=z(n[4]),c=z(n[5])-1;if(o)return function(e,t,n){return t>=1&&t<=53&&n>=0&&n<=6}(0,i,c)?function(e,t,n){var o=new Date(0);o.setUTCFullYear(e,0,4);var a=7*(t-1)+n+1-(o.getUTCDay()||7);return o.setUTCDate(o.getUTCDate()+a),o}(t,i,c):new Date(NaN);var d=new Date(0);return function(e,t,n){return t>=0&&t<=11&&n>=1&&n<=(W[t]||(F(e)?29:28))}(t,r,s)&&function(e,t){return t>=1&&t<=(F(e)?366:365)}(t,a)?(d.setUTCFullYear(t,r,Math.max(a,s)),d):new Date(NaN)}(s.restDateString,s.year)}if(!a||isNaN(a.getTime()))return new Date(NaN);var i,c=a.getTime(),d=0;if(r.time&&(d=function(e){var t=e.match(M);if(!t)return NaN;var n=K(t[1]),o=K(t[2]),a=K(t[3]);return function(e,t,n){return 24===e?0===t&&0===n:n>=0&&n<60&&t>=0&&t<60&&e>=0&&e<25}(n,o,a)?n*G+6e4*o+1e3*a:NaN}(r.time),isNaN(d)))return new Date(NaN);if(!r.timezone){var l=new Date(c+d),p=new Date(0);return p.setFullYear(l.getUTCFullYear(),l.getUTCMonth(),l.getUTCDate()),p.setHours(l.getUTCHours(),l.getUTCMinutes(),l.getUTCSeconds(),l.getUTCMilliseconds()),p}return i=function(e){if("Z"===e)return 0;var t=e.match(U);if(!t)return 0;var n="+"===t[1]?-1:1,o=parseInt(t[2]),a=t[3]&&parseInt(t[3])||0;return function(e,t){return t>=0&&t<=59}(0,a)?n*(o*G+6e4*a):NaN}(r.timezone),isNaN(i)?new Date(NaN):new Date(c+d+i)}var P={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},L=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,M=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,U=/^([+-])(\d{2})(?::?(\d{2}))?$/;function z(e){return e?parseInt(e):1}function K(e){return e&&parseFloat(e.replace(",","."))||0}var W=[31,null,31,30,31,30,31,31,30,31,30,31];function F(e){return e%400==0||e%4==0&&e%100!=0}const Y=document.getElementById("main-content"),O=document.getElementById("sidebar-content");class Z{static loadPage(){Z.loadData(),Z.loadListeners()}static loadListeners(){document.getElementById("add-task-button").addEventListener("click",Z.openTaskMenu),document.getElementById("add-project-button").addEventListener("click",Z.openProjectMenu),document.getElementById("default-project").addEventListener("click",Z.displayDefaultProject),document.getElementById("today-project-title").addEventListener("click",Z.displayTodayProject),document.getElementById("this-week-project-title").addEventListener("click",Z.displayThisWeekProject)}static loadData(){if(null===localStorage.getItem("data")){v.createDefaults();const e=v.getData();for(const t of e.projects)"Default Project"==t.name&&t.select();v.updateData(e)}else console.log(v.getData()),Z.loadSideBar(),Z.loadSelected()}static openTaskMenu(){console.log("Add task button clicked");const e=document.createElement("form");e.id="task-menu";const t=document.createElement("input"),n=document.createElement("input");n.type="date";const o=document.createElement("button");o.type="button",o.textContent="Add Task",e.appendChild(t),e.appendChild(n),e.appendChild(o),Y.appendChild(e),o.addEventListener("click",(o=>{const a=new x(t.value,n.value);console.log(a);const r=v.getData();for(const e of r.projects)e.isSelected&&(console.log("adding "+a.name+" to "+e.name),e.addTask(a),v.updateData(r),e.display());Y.removeChild(e)}))}static openProjectMenu(){const e=document.createElement("div");e.id="project-menu";const t=document.createElement("input");t.id="project-menu-input";const n=document.createElement("button");n.textContent="Submit",e.appendChild(t),e.appendChild(n),O.appendChild(e),n.addEventListener("click",(e=>{const n=new b(t.value,t.value);v.addProject(n),console.log(v.getData()),Z.addProjectToSidebar(n,!0),v.selectProject(n)}))}static loadSideBar(){const e=v.getData();for(const t of e.projects)"Default Project"==t.name||"Today Project"==t.name||"This Week Project"==t.name||this.addProjectToSidebar(t,!1)}static addProjectToSidebar(e,t){const n=document.createElement("div");n.classList.add("projects"),n.id=e.name;const o=new Image;o.src=k;const a=document.createElement("h2");a.textContent=e.name,n.appendChild(o),n.appendChild(a),t&&O.removeChild(document.getElementById("project-menu")),O.insertBefore(n,document.getElementById("add-project-button")),console.log("added project to sidebar"),n.addEventListener("click",(t=>{console.log(`${e.name} was clicked`),v.selectProject(e),e.display()}))}static selectProject(e){Z.deselectProjects(),document.getElementById(e).classList.add("selected")}static deselectProjects(){const e=document.getElementsByClassName("projects");for(const t of e)t.classList.remove("selected")}static loadSelected(){console.log("Loading selected project");const e=v.getData();console.log(e);for(const t of e.getProjects())t.isSelected?"Today Project"==t.name?Z.displayTodayProject():"This Week Project"==t.name?Z.displayThisWeekProject():(console.log("displaying "+t.name),t.select(),t.display()):console.log("no project selected, fix this")}static displayDefaultProject(){const e=v.getData();for(const t of e.projects)t.isSelected&&t.deselect();for(const t of e.projects)"Default Project"==t.name&&t.select();v.updateData(e),console.log(v.getData())}static displayTodayProject(){const e=v.getData();for(const t of e.projects)t.isSelected&&t.deselect();for(const t of e.projects)"Today Project"==t.name&&t.select();v.updateData(e),console.log(v.getData());const t=new Date;console.log(t);for(const n of e.projects)for(const e of n.tasks)console.log(e.dueDate),0==S(t,N(e.dueDate))&&e.displayTask()}static displayThisWeekProject(){const e=v.getData();for(const t of e.projects)t.isSelected&&t.deselect();for(const t of e.projects)"This Week Project"==t.name&&t.select();v.updateData(e),console.log(v.getData());const t=new Date;console.log(t);for(const n of e.projects)for(const e of n.tasks){console.log(e.dueDate);const n=S(t,N(e.dueDate));n<=0&&n>-7&&e.displayTask()}}}Z.loadPage()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,